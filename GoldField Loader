-- GoldField UI Loader Script with Tabs
local plr = game.Players.LocalPlayer

local LoadUi = {}
local ScriptUi = nil
local TabContainer = nil
local CurrentTab = nil
local Tabs = {}

function LoadUi:LoadWindow(name1, name2, versionOfUi, Gradient, mainUiName, ShowPlayerUi)
	-- Reset variables for new window
	ScriptUi = nil
	TabContainer = nil
	CurrentTab = nil
	Tabs = {}
	
	-- Create all instances first
	local GoldField = Instance.new("ScreenGui")
	local LoadingUi = Instance.new("Frame")
	local Default_Gradient = Instance.new("UIGradient")
	local CornerIT = Instance.new("UICorner")
	local MainText = Instance.new("TextLabel")
	local OtherText = Instance.new("TextLabel")
	local VersionText = Instance.new("TextLabel")
	local MainUi = Instance.new("Frame")
	local CornerIT_2 = Instance.new("UICorner")
	local Default_Gradient_2 = Instance.new("UIGradient")
	local Player = Instance.new("ImageLabel")
	local CornerIT_3 = Instance.new("UICorner")
	local Display = Instance.new("TextLabel")
	local UserName = Instance.new("TextLabel")
	local TopUI = Instance.new("Frame")
	local Default_Gradient_3 = Instance.new("UIGradient")
	local MainText_2 = Instance.new("TextLabel")
	local X = Instance.new("TextButton")
	local CornerIT_4 = Instance.new("UICorner")

	-- Create TabContainer and main content area
	TabContainer = Instance.new("Frame")
	ScriptUi = Instance.new("ScrollingFrame")

	-- Set up main ScreenGui
	GoldField.Name = "GoldField"
	GoldField.Parent = plr:WaitForChild("PlayerGui")
	GoldField.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	GoldField.ResetOnSpawn = false

	-- Loading UI setup
	LoadingUi.Name = "LoadingUi"
	LoadingUi.Parent = GoldField
	LoadingUi.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	LoadingUi.BorderColor3 = Color3.fromRGB(0, 0, 0)
	LoadingUi.BorderSizePixel = 0
	LoadingUi.Position = UDim2.new(0.424017787, 0, 0.449748755, 0)
	LoadingUi.Size = UDim2.new(0.151223123, 0, 0.0992462337, 0)
	LoadingUi.ZIndex = 9999

	Default_Gradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.00, Color3.fromRGB(20, 20, 20)), 
		ColorSequenceKeypoint.new(1.00, Color3.fromRGB(58, 57, 57))
	}
	Default_Gradient.Name = "Default_Gradient"
	Default_Gradient.Parent = LoadingUi

	CornerIT.CornerRadius = UDim.new(0, 16)
	CornerIT.Name = "CornerIT"
	CornerIT.Parent = LoadingUi

	MainText.Name = "MainText"
	MainText.Parent = LoadingUi
	MainText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	MainText.BackgroundTransparency = 1.000
	MainText.BorderColor3 = Color3.fromRGB(0, 0, 0)
	MainText.BorderSizePixel = 0
	MainText.Position = UDim2.new(0.0480769239, 0, 0.12658228, 0)
	MainText.Size = UDim2.new(0, 226, 0, 26)
	MainText.Font = Enum.Font.GothamBold
	MainText.Text = tostring(name1 or "Loading...")
	MainText.TextColor3 = Color3.fromRGB(255, 255, 255)
	MainText.TextSize = 16.000
	MainText.TextWrapped = true
	MainText.TextXAlignment = Enum.TextXAlignment.Left

	OtherText.Name = "OtherText"
	OtherText.Parent = LoadingUi
	OtherText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	OtherText.BackgroundTransparency = 1.000
	OtherText.BorderColor3 = Color3.fromRGB(0, 0, 0)
	OtherText.BorderSizePixel = 0
	OtherText.Position = UDim2.new(0.0480768532, 0, 0.455696195, 0)
	OtherText.Size = UDim2.new(0, 226, 0, 26)
	OtherText.Font = Enum.Font.Gotham
	OtherText.Text = tostring(name2 or "Please wait...")
	OtherText.TextColor3 = Color3.fromRGB(255, 255, 255)
	OtherText.TextSize = 14.000
	OtherText.TextWrapped = true
	OtherText.TextXAlignment = Enum.TextXAlignment.Left

	VersionText.Name = "VersionText"
	VersionText.Parent = GoldField
	VersionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	VersionText.BackgroundTransparency = 1.000
	VersionText.BorderColor3 = Color3.fromRGB(0, 0, 0)
	VersionText.BorderSizePixel = 0
	VersionText.Position = UDim2.new(0.00593031896, 0, 0.00879396964, 0)
	VersionText.Size = UDim2.new(0, 226, 0, 26)
	VersionText.Font = Enum.Font.Gotham
	VersionText.Text = "Version: " .. tostring(versionOfUi or "Unknown")
	VersionText.TextColor3 = Color3.fromRGB(255, 255, 255)
	VersionText.TextSize = 14.000
	VersionText.TextWrapped = true
	VersionText.TextXAlignment = Enum.TextXAlignment.Left
	VersionText.ZIndex = 9999

	MainUi.Name = "MainUi"
	MainUi.Parent = GoldField
	MainUi.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	MainUi.BorderColor3 = Color3.fromRGB(0, 0, 0)
	MainUi.BorderSizePixel = 0
	MainUi.Position = UDim2.new(0.338028163, 0, 0.180904523, 0)
	MainUi.Size = UDim2.new(0.323943675, 0, 0.576633155, 0)
	MainUi.Visible = false
	MainUi.ZIndex = 9999

	CornerIT_2.CornerRadius = UDim.new(0, 16)
	CornerIT_2.Name = "CornerIT"
	CornerIT_2.Parent = MainUi

	Default_Gradient_2.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.00, Color3.fromRGB(20, 20, 20)), 
		ColorSequenceKeypoint.new(1.00, Color3.fromRGB(58, 57, 57))
	}
	Default_Gradient_2.Name = "Default_Gradient"
	Default_Gradient_2.Parent = MainUi

	Player.Name = "Player"
	Player.Parent = MainUi
	Player.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Player.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Player.BorderSizePixel = 0
	Player.Position = UDim2.new(-0.0526315048, 0, 0.936819196, 0)
	Player.Size = UDim2.new(0.114867702, 0, 0.111111075, 0)
	Player.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
	Player.Visible = (ShowPlayerUi == "Enabled")

	CornerIT_3.CornerRadius = UDim.new(1, 0)
	CornerIT_3.Name = "CornerIT"
	CornerIT_3.Parent = Player

	Display.Name = "Display"
	Display.Parent = Player
	Display.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Display.BackgroundTransparency = 1.000
	Display.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Display.BorderSizePixel = 0
	Display.Position = UDim2.new(1.03591394, 0, 0.156862795, 0)
	Display.Size = UDim2.new(0, 87, 0, 21)
	Display.Font = Enum.Font.Gotham
	Display.Text = ""
	Display.TextColor3 = Color3.fromRGB(255, 255, 255)
	Display.TextScaled = true
	Display.TextSize = 14.000
	Display.TextWrapped = true
	Display.TextXAlignment = Enum.TextXAlignment.Left

	UserName.Name = "UserName"
	UserName.Parent = Player
	UserName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	UserName.BackgroundTransparency = 1.000
	UserName.BorderColor3 = Color3.fromRGB(0, 0, 0)
	UserName.BorderSizePixel = 0
	UserName.Position = UDim2.new(0.9960711, 0, 0.588235497, 0)
	UserName.Size = UDim2.new(0, 87, 0, 12)
	UserName.Font = Enum.Font.Gotham
	UserName.Text = ""
	UserName.TextColor3 = Color3.fromRGB(255, 255, 255)
	UserName.TextScaled = true
	UserName.TextSize = 14.000
	UserName.TextWrapped = true
	UserName.TextXAlignment = Enum.TextXAlignment.Left

	TopUI.Name = "TopUI"
	TopUI.Parent = MainUi
	TopUI.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TopUI.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TopUI.BorderSizePixel = 0
	TopUI.Position = UDim2.new(0, 0, 0, 0)
	TopUI.Size = UDim2.new(1, 0, 0.0634983182, 0)

	Default_Gradient_3.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0.00, Color3.fromRGB(20, 20, 20)), 
		ColorSequenceKeypoint.new(1.00, Color3.fromRGB(58, 57, 57))
	}
	Default_Gradient_3.Name = "Default_Gradient"
	Default_Gradient_3.Parent = TopUI

	MainText_2.Name = "MainText"
	MainText_2.Parent = TopUI
	MainText_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	MainText_2.BackgroundTransparency = 1.000
	MainText_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	MainText_2.BorderSizePixel = 0
	MainText_2.Position = UDim2.new(0.0137519026, 0, 0.0236511882, 0)
	MainText_2.Size = UDim2.new(0, 226, 0, 26)
	MainText_2.Font = Enum.Font.Gotham
	MainText_2.Text = tostring(mainUiName or "UI")
	MainText_2.TextColor3 = Color3.fromRGB(255, 255, 255)
	MainText_2.TextSize = 16.000
	MainText_2.TextWrapped = true
	MainText_2.TextXAlignment = Enum.TextXAlignment.Left

	-- Tab Container (for tab buttons)
	TabContainer.Name = "TabContainer"
	TabContainer.Parent = MainUi
	TabContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	TabContainer.BorderSizePixel = 0
	TabContainer.Position = UDim2.new(0, 0, 0.0634983182, 0)
	TabContainer.Size = UDim2.new(1, 0, 0, 35)

	local tabLayout = Instance.new("UIListLayout")
	tabLayout.Parent = TabContainer
	tabLayout.FillDirection = Enum.FillDirection.Horizontal
	tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	tabLayout.Padding = UDim.new(0, 2)

	local tabPadding = Instance.new("UIPadding")
	tabPadding.Parent = TabContainer
	tabPadding.PaddingAll = UDim.new(0, 2)

	-- Main Content Area (adjusted for tabs)
	ScriptUi.Name = "ScriptUi"
	ScriptUi.Parent = MainUi
	ScriptUi.Active = true
	ScriptUi.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ScriptUi.BackgroundTransparency = 1.000
	ScriptUi.BorderColor3 = Color3.fromRGB(0, 0, 0)
	ScriptUi.BorderSizePixel = 0
	ScriptUi.Position = UDim2.new(0.0137299765, 0, 0.15, 0) -- Adjusted for tab container
	ScriptUi.Size = UDim2.new(0.954233348, 0, 0.77, 0) -- Adjusted height
	ScriptUi.CanvasSize = UDim2.new(0, 0, 0, 0)
	ScriptUi.AutomaticCanvasSize = Enum.AutomaticSize.Y
	ScriptUi.ScrollBarThickness = 4
	ScriptUi.Visible = false -- Initially hidden until first tab is created

	local UIListLayout = Instance.new("UIListLayout")
	UIListLayout.Parent = ScriptUi
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Padding = UDim.new(0, 2)

	X.Name = "X"
	X.Parent = MainUi
	X.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
	X.BorderColor3 = Color3.fromRGB(0, 0, 0)
	X.BorderSizePixel = 0
	X.Position = UDim2.new(0.938215017, 0, 0.0130719617, 0)
	X.Size = UDim2.new(0.0366132706, 0, 0.0351758599, 0)
	X.Font = Enum.Font.GothamBold
	X.Text = "X"
	X.TextColor3 = Color3.fromRGB(255, 255, 255)
	X.TextSize = 14.000

	CornerIT_4.CornerRadius = UDim.new(1, 0)
	CornerIT_4.Name = "CornerIT"
	CornerIT_4.Parent = X

	-- Set up player info in a protected call
	pcall(function()
		if ShowPlayerUi == "Enabled" then
			Player.Image = "rbxthumb://type=AvatarHeadShot&id=" .. plr.UserId .. "&w=150&h=150"
			Display.Text = plr.DisplayName or plr.Name
			UserName.Text = "@" .. plr.Name
		end
	end)

	-- Set up dragging functionality
	local UserInputService = game:GetService("UserInputService")
	local dragging = false
	local dragStart = nil
	local startPos = nil

	TopUI.Active = true

	TopUI.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = MainUi.Position
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			MainUi.Position = UDim2.new(
				startPos.X.Scale,
				startPos.X.Offset + delta.X,
				startPos.Y.Scale,
				startPos.Y.Offset + delta.Y
			)
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = false
		end
	end)

	-- Close button functionality
	X.Activated:Connect(function()
		GoldField:Destroy()
		ScriptUi = nil
		TabContainer = nil
		CurrentTab = nil
		Tabs = {}
	end)

	-- Loading sequence
	task.spawn(function()
		task.wait(2)
		
		-- Handle player UI visibility
		if ShowPlayerUi ~= "Enabled" then
			Player:Destroy()
		end
		
		-- Show main UI and hide loading
		MainUi.Visible = true
		LoadingUi:Destroy()
	end)

	-- Return the LoadUi object for method chaining
	return LoadUi
end

function LoadUi:NewTab(TabName)
	if not TabContainer or not TabContainer.Parent then
		warn("LoadUi:NewTab() - No window created yet. Call LoadWindow() first.")
		return nil
	end

	local TabFrame = Instance.new("ScrollingFrame")
	TabFrame.Name = "Tab_" .. tostring(TabName)
	TabFrame.Parent = ScriptUi.Parent
	TabFrame.Active = true
	TabFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	TabFrame.BackgroundTransparency = 1.000
	TabFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
	TabFrame.BorderSizePixel = 0
	TabFrame.Position = UDim2.new(0.0137299765, 0, 0.15, 0)
	TabFrame.Size = UDim2.new(0.954233348, 0, 0.77, 0)
	TabFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
	TabFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
	TabFrame.ScrollBarThickness = 4
	TabFrame.Visible = false

	local TabLayout = Instance.new("UIListLayout")
	TabLayout.Parent = TabFrame
	TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	TabLayout.Padding = UDim.new(0, 2)

	-- Create tab button
	local TabButton = Instance.new("TextButton")
	TabButton.Name = "TabButton_" .. tostring(TabName)
	TabButton.Parent = TabContainer
	TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	TabButton.BorderSizePixel = 0
	TabButton.Size = UDim2.new(0, 100, 1, -4)
	TabButton.Font = Enum.Font.RobotoMono
	TabButton.Text = tostring(TabName or "Tab")
	TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
	TabButton.TextSize = 12
	TabButton.TextScaled = true

	local tabCorner = Instance.new("UICorner")
	tabCorner.CornerRadius = UDim.new(0, 5)
	tabCorner.Parent = TabButton

	-- Tab switching functionality
	TabButton.MouseButton1Click:Connect(function()
		-- Hide all tabs
		for _, tab in pairs(Tabs) do
			tab.Frame.Visible = false
			tab.Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			tab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
		end
		
		-- Show selected tab
		TabFrame.Visible = true
		TabButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		
		-- Update current tab reference
		CurrentTab = TabFrame
		ScriptUi = TabFrame
	end)

	-- Store tab info
	local tabInfo = {
		Frame = TabFrame,
		Button = TabButton,
		Name = TabName
	}
	table.insert(Tabs, tabInfo)

	-- If this is the first tab, make it active
	if #Tabs == 1 then
		TabFrame.Visible = true
		TabButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
		TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		CurrentTab = TabFrame
		ScriptUi = TabFrame
	end

	return {
		Frame = TabFrame,
		Button = TabButton,
		NewButton = function(self, NameOfButton, ButtonFunction)
			return LoadUi:NewButton(NameOfButton, ButtonFunction, TabFrame)
		end,
		NewText = function(self, Text)
			return LoadUi:NewText(Text, TabFrame)
		end,
		NewToggle = function(self, ToggleName, DefaultState, ToggleFunction)
			return LoadUi:NewToggle(ToggleName, DefaultState, ToggleFunction, TabFrame)
		end,
		NewDropdown = function(self, DropdownName, Options, DefaultOption, SelectFunction)
			return LoadUi:NewDropdown(DropdownName, Options, DefaultOption, SelectFunction, TabFrame)
		end,
		NewDivider = function(self)
			return LoadUi:NewDivider(TabFrame)
		end
	}
end

function LoadUi:NewButton(NameOfButton, ButtonFunction, TargetFrame)
	local targetFrame = TargetFrame or ScriptUi
	if not targetFrame or not targetFrame.Parent then
		warn("LoadUi:NewButton() - No valid target frame.")
		return nil
	end

	local Button = Instance.new("TextButton")
	Button.Parent = targetFrame
	Button.Font = Enum.Font.RobotoMono
	Button.Name = "NewButton"
	Button.Text = tostring(NameOfButton or "Button")
	Button.Size = UDim2.new(1, -10, 0, 30)
	Button.TextScaled = true
	Button.TextWrapped = true
	Button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	Button.TextColor3 = Color3.fromRGB(255, 255, 255)
	Button.TextXAlignment = Enum.TextXAlignment.Left
	Button.BorderSizePixel = 0

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 5)
	corner.Parent = Button

	local padding = Instance.new("UIPadding")
	padding.PaddingLeft = UDim.new(0, 10)
	padding.Parent = Button

	Button.MouseButton1Click:Connect(function()
		local success, err = pcall(function()
			if type(ButtonFunction) == "string" then
				if ButtonFunction:match("^https?://") then
					loadstring(game:HttpGet(ButtonFunction))()
				else
					loadstring(ButtonFunction)()
				end
			elseif type(ButtonFunction) == "function" then
				ButtonFunction()
			end
		end)
		
		if not success then
			warn("Button execution error:", err)
		end
	end)

	return Button
end

function LoadUi:NewText(Text, TargetFrame)
	local targetFrame = TargetFrame or ScriptUi
	if not targetFrame or not targetFrame.Parent then
		warn("LoadUi:NewText() - No valid target frame.")
		return nil
	end

	local TextLabel = Instance.new("TextLabel")
	TextLabel.BackgroundTransparency = 1
	TextLabel.Parent = targetFrame
	TextLabel.Font = Enum.Font.RobotoMono
	TextLabel.Name = "NewText"
	TextLabel.Text = tostring(Text or "Text")
	TextLabel.Size = UDim2.new(1, -10, 0, 25)
	TextLabel.TextScaled = true
	TextLabel.TextWrapped = true
	TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.TextXAlignment = Enum.TextXAlignment.Left

	local padding = Instance.new("UIPadding")
	padding.PaddingLeft = UDim.new(0, 10)
	padding.Parent = TextLabel

	return TextLabel
end

function LoadUi:NewDivider(TargetFrame)
	local targetFrame = TargetFrame or ScriptUi
	if not targetFrame or not targetFrame.Parent then
		warn("LoadUi:NewDivider() - No valid target frame.")
		return nil
	end

	local DividerFrame = Instance.new("Frame")
	DividerFrame.Parent = targetFrame
	DividerFrame.Name = "NewDivider"
	DividerFrame.Size = UDim2.new(1, -20, 0, 10)
	DividerFrame.BackgroundTransparency = 1
	DividerFrame.BorderSizePixel = 0

	local DividerLine = Instance.new("Frame")
	DividerLine.Parent = DividerFrame
	DividerLine.Name = "Line"
	DividerLine.Size = UDim2.new(1, 0, 0, 1)
	DividerLine.Position = UDim2.new(0, 0, 0.5, 0)
	DividerLine.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
	DividerLine.BorderSizePixel = 0

	return DividerFrame
end

function LoadUi:NewToggle(ToggleName, DefaultState, ToggleFunction, TargetFrame)
	local targetFrame = TargetFrame or ScriptUi
	if not targetFrame or not targetFrame.Parent then
		warn("LoadUi:NewToggle() - No valid target frame.")
		return nil
	end

	local ToggleState = DefaultState or false
	
	local ToggleFrame = Instance.new("Frame")
	ToggleFrame.Parent = targetFrame
	ToggleFrame.Name = "NewToggle"
	ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
	ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	ToggleFrame.BorderSizePixel = 0

	local toggleCorner = Instance.new("UICorner")
	toggleCorner.CornerRadius = UDim.new(0, 5)
	toggleCorner.Parent = ToggleFrame

	local ToggleButton = Instance.new("TextButton")
	ToggleButton.Parent = ToggleFrame
	ToggleButton.Name = "Button"
	ToggleButton.Size = UDim2.new(1, 0, 1, 0)
	ToggleButton.BackgroundTransparency = 1
	ToggleButton.Text = ""

	local ToggleLabel = Instance.new("TextLabel")
	ToggleLabel.Parent = ToggleFrame
	ToggleLabel.Name = "Label"
	ToggleLabel.BackgroundTransparency = 1
	ToggleLabel.Position = UDim2.new(0, 10, 0, 0)
	ToggleLabel.Size = UDim2.new(1, -50, 1, 0)
	ToggleLabel.Font = Enum.Font.RobotoMono
	ToggleLabel.Text = tostring(ToggleName or "Toggle")
	ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	ToggleLabel.TextScaled = true
	ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left

	local ToggleSwitch = Instance.new("Frame")
	ToggleSwitch.Parent = ToggleFrame
	ToggleSwitch.Name = "Switch"
	ToggleSwitch.Position = UDim2.new(1, -35, 0.5, -8)
	ToggleSwitch.Size = UDim2.new(0, 30, 0, 16)
	ToggleSwitch.BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(100, 100, 100)
	ToggleSwitch.BorderSizePixel = 0

	local switchCorner = Instance.new("UICorner")
	switchCorner.CornerRadius = UDim.new(0, 8)
	switchCorner.Parent = ToggleSwitch

	local ToggleCircle = Instance.new("Frame")
	ToggleCircle.Parent = ToggleSwitch
	ToggleCircle.Name = "Circle"
	ToggleCircle.Size = UDim2.new(0, 12, 0, 12)
	ToggleCircle.Position = ToggleState and UDim2.new(1, -14, 0.5, -6) or UDim2.new(0, 2, 0.5, -6)
	ToggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	ToggleCircle.BorderSizePixel = 0

	local circleCorner = Instance.new("UICorner")
	circleCorner.CornerRadius = UDim.new(0, 6)
	circleCorner.Parent = ToggleCircle

	local function UpdateToggle()
		local TweenService = game:GetService("TweenService")
		local switchTween = TweenService:Create(ToggleSwitch, TweenInfo.new(0.2), {
			BackgroundColor3 = ToggleState and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(100, 100, 100)
		})
		local circleTween = TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {
			Position = ToggleState and UDim2.new(1, -14, 0.5, -6) or UDim2.new(0, 2, 0.5, -6)
		})
		switchTween:Play()
		circleTween:Play()
	end

	ToggleButton.MouseButton1Click:Connect(function()
		ToggleState = not ToggleState
		UpdateToggle()
		
		if ToggleFunction then
			local success, err = pcall(function()
				if type(ToggleFunction) == "function" then
					ToggleFunction(ToggleState)
				elseif type(ToggleFunction) == "string" then
					loadstring(ToggleFunction)(ToggleState)
				end
			end)
			
			if not success then
				warn("Toggle function error:", err)
			end
		end
	end)

	return {
		Frame = ToggleFrame,
		GetState = function() return ToggleState end,
		SetState = function(newState)
			ToggleState = newState
			UpdateToggle()
		end
	}
end

function LoadUi:NewDropdown(DropdownName, Options, DefaultOption, SelectFunction, TargetFrame)
	local targetFrame = TargetFrame or ScriptUi
	if not targetFrame or not targetFrame.Parent then
		warn("LoadUi:NewDropdown() - No valid target frame.")
		return nil
	end

	local OptionsTable = Options or {"Option 1", "Option 2", "Option 3"}
	local SelectedOption = DefaultOption or OptionsTable[1]
	local IsOpen = false

	local DropdownFrame = Instance.new("Frame")
	DropdownFrame.Parent = targetFrame
	DropdownFrame.Name = "NewDropdown"
	DropdownFrame.Size = UDim2.new(1, -10, 0, 30)
	DropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	DropdownFrame.BorderSizePixel = 0
	DropdownFrame.ClipsDescendants = true

	local dropdownCorner = Instance.new("UICorner")
	dropdownCorner.CornerRadius = UDim.new(0, 5)
	dropdownCorner.Parent = DropdownFrame

	local DropdownButton = Instance.new("TextButton")
	DropdownButton.Parent = DropdownFrame
	DropdownButton.Name = "Button"
	DropdownButton.Size = UDim2.new(1, 0, 0, 30)
	DropdownButton.BackgroundTransparency = 1
	DropdownButton.Text = ""

	local DropdownLabel = Instance.new("TextLabel")
	DropdownLabel.Parent = DropdownButton
	DropdownLabel.Name = "Label"
	DropdownLabel.BackgroundTransparency = 1
	DropdownLabel.Position = UDim2.new(0, 10, 0, 0)
	DropdownLabel.Size = UDim2.new(1, -30, 1, 0)
	DropdownLabel.Font = Enum.Font.RobotoMono
	DropdownLabel.Text = tostring(DropdownName or "Dropdown") .. ": " .. tostring(SelectedOption)
	DropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	DropdownLabel.TextScaled = true
	DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left

	local DropdownArrow = Instance.new("TextLabel")
	DropdownArrow.Parent = DropdownButton
	DropdownArrow.Name = "Arrow"
	DropdownArrow.BackgroundTransparency = 1
	DropdownArrow.Position = UDim2.new(1, -25, 0, 0)
	DropdownArrow.Size = UDim2.new(0, 20, 1, 0)
	DropdownArrow.Font = Enum.Font.RobotoMono
	DropdownArrow.Text = "▼"
	DropdownArrow.TextColor3 = Color3.fromRGB(255, 255, 255)
	DropdownArrow.TextScaled = true

	local OptionsFrame = Instance.new("Frame")
	OptionsFrame.Parent = DropdownFrame
	OptionsFrame.Name = "Options"
	OptionsFrame.Position = UDim2.new(0, 0, 0, 30)
	OptionsFrame.Size = UDim2.new(1, 0, 0, #OptionsTable * 25)
	OptionsFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	OptionsFrame.BorderSizePixel = 0

	local optionsLayout = Instance.new("UIListLayout")
	optionsLayout.Parent = OptionsFrame
	optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder

	local function UpdateDropdown()
		local TweenService = game:GetService("TweenService")
		local sizeTween = TweenService:Create(DropdownFrame, TweenInfo.new(0.2), {
			Size = IsOpen and UDim2.new(1, -10, 0, 30 + (#OptionsTable * 25)) or UDim2.new(1, -10, 0, 30)
		})
		local arrowTween = TweenService:Create(DropdownArrow, TweenInfo.new(0.2), {
			Rotation = IsOpen and 180 or 0
		})
		sizeTween:Play()
		arrowTween:Play()
	end

	for i, option in ipairs(OptionsTable) do
		local OptionButton = Instance.new("TextButton")
		OptionButton.Parent = OptionsFrame
		OptionButton.Name = "Option_" .. i
		OptionButton.Size = UDim2.new(1, 0, 0, 25)
		OptionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		OptionButton.BorderSizePixel = 0
		OptionButton.Font = Enum.Font.RobotoMono
		OptionButton.Text = "  " .. tostring(option)
		OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		OptionButton.TextScaled = true
		OptionButton.TextXAlignment = Enum.TextXAlignment.Left

		OptionButton.MouseEnter:Connect(function()
			OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
		end)

		OptionButton.MouseLeave:Connect(function()
			OptionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		end)

		OptionButton.MouseButton1Click:Connect(function()
			SelectedOption = option
			DropdownLabel.Text = tostring(DropdownName or "Dropdown") .. ": " .. tostring(SelectedOption)
			IsOpen = false
			UpdateDropdown()

			if SelectFunction then
				local success, err = pcall(function()
					if type(SelectFunction) == "function" then
						SelectFunction(SelectedOption)
					elseif type(SelectFunction) == "string" then
						loadstring(SelectFunction)(SelectedOption)
					end
				end)
				
				if not success then
					warn("Dropdown select function error:", err)
				end
			end
		end)
	end

	DropdownButton.MouseButton1Click:Connect(function()
		IsOpen = not IsOpen
		UpdateDropdown()
	end)

	return {
		Frame = DropdownFrame,
		GetSelected = function() return SelectedOption end,
		SetSelected = function(option)
			if table.find(OptionsTable, option) then
				SelectedOption = option
				DropdownLabel.Text = tostring(DropdownName or "Dropdown") .. ": " .. tostring(SelectedOption)
			end
		end,
		AddOption = function(option)
			table.insert(OptionsTable, option)
			-- Recreate options (simplified approach)
		end
	}
end

-- Return the LoadUi table
return LoadUi
